#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

#define N 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2
#define LEFT (phnum + 4) % N
#define RIGHT (phnum + 1) % N

sem_t mutex;
sem_t S[N];

void *philosph(void *num);
void take_fork(int);
void put_fork(int);
void test(int);

int state[N];
int phil_num[N] = {0, 1, 2, 3, 4};

int main()
{
    int i;
    pthread_t thread_id[N];

    // inicializa os semáforos
    sem_init(&mutex, 0, 1);
    for (i = 0; i < N; i++)
        sem_init(&S[i], 0, 0);

    // cria as threads dos filósofos
    for (i = 0; i < N; i++)
    {
        pthread_create(&thread_id[i], NULL, philosph, &phil_num[i]);
        printf("Filosofo %d está pensando\n", i + 1);
    }

    for (i = 0; i < N; i++)
        pthread_join(thread_id[i], NULL);
}

void *philosph(void *num)
{
    while (1)
    {
        int *i = num;
        sleep(1);
        take_fork(*i);
        sleep(0);
        put_fork(*i);
    }
}

void take_fork(int phnum)
{
    sem_wait(&mutex);
    state[phnum] = HUNGRY;
    printf("Filosofo %d está com fome\n", phnum + 1);
    test(phnum);
    sem_post(&mutex);
    sem_wait(&S[phnum]);
    sleep(1);
}

void test(int phnum)
{
    if (state[phnum] == HUNGRY && state[LEFT] != EATING && state[RIGHT] != EATING)
    {
        state[phnum] = EATING;
        sleep(2);
        printf("Filosofo %d pegou os garfos %d e %d\n", phnum + 1, LEFT + 1, phnum + 1);
        printf("Filosofo %d está comendo\n", phnum + 1);
        sem_post(&S[phnum]);
    }
}

void put_fork(int phnum)
{
    sem_wait(&mutex);
    state[phnum] = THINKING;
    printf("Filosofo %d colocou os garfos %d e %d na mesa\n", phnum + 1, LEFT + 1, phnum + 1);
    printf("Filosofo %d está pensando\n", phnum + 1);
    test(LEFT);
    test(RIGHT);
    sem_post(&mutex);
}
